import torch
import torch.nn as nn
import torch.nn.functional as F


class LeNet(nn.Module):
    def __init__(self):
        super(LeNet, self).__init__()
        self.conv1 = nn.Conv2d(1, 10, kernel_size=5)
        self.conv2 = nn.Conv2d(10, 20, kernel_size=5)
        self.conv2_drop = nn.Dropout2d()
        self.fc1 = nn.Linear(320, 50)
        self.fc2 = nn.Linear(50, 10)

    def forward(self, x):
        out = F.relu(F.max_pool2d(self.conv1(x), 2))
        out = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(out)), 2))
        out = out.view(-1, 320)
        out = F.relu(self.fc1(out))
        out = F.dropout(out, training=self.training)
        out = F.log_softmax(self.fc2(out), dim=1)
        return out
    
    def get_state(self, x):
        x1 = F.relu(F.max_pool2d(self.conv1(x), 2))
        x2 = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x1)), 2))
        x2 = x2.view(-1, 320)
        x3 = F.relu(self.fc1(x2))
        x3 = F.dropout(x3, training=self.training)
        x4 = F.log_softmax(self.fc2(x3), dim=1)
        return [x1.cpu().data.numpy(),
                 x2.cpu().data.numpy(),
                 x3.cpu().data.numpy(),
                 x4.cpu().data.numpy()]

    
def test():
    net = LeNet()
    print(net)
    x = torch.randn(1,1,28,28)
    y = net(x)
    print(y.size())

    for i, layer in enumerate(net.get_state(x)):
        print('layer {} has size {}'.format(i, layer.shape))

test()
